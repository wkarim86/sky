@mixin screen-to($breakpoint) {
    // Retrieves the value from the key
    $value: map-get($breakpoints, $breakpoint);
    
    // If the key exists in the map
    @if $value !=null {
        // Prints a media query based on the value
        @media (min-width: $value) {
            @content;
        }
    }
    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "+"Please make sure it is defined in `$breakpoints` map.";
    }
}

///@param {position} $position - HTML element position eg. absolute | relative | fixed | static
@mixin container ($position, $width : null, $height: null, $left: null, $right: null,  $top: null, $bottom: null) {
    position: $position;    
    @if($width != null){
        width : $width;
    }@else{
        width : auto;
    }
    @if($height != null){
        height : $height;
    }@else{
        height : auto;
    }

    @if ( $left !=null and $right == null) {
        left: $left;
    }@else if ($right != null and $left == null){
        right : $right;
    }

    @if ( $top !=null and $bottom == null) {
        top: $top;
    }@else if($bottom != null and $top == null){
        bottom: $bottom;
    }
}


@mixin height($size){    
    @include respond-to(xs){
        height : pixel2Rem($size * 0.6);
    }
    @include respond-to(sm){
        height : pixel2Rem($size * 0.7);
    }
    @include respond-to(md){
        height : pixel2Rem($size * 0.8);
    }

    @include respond-to(lg){        
        height: pixel2Rem($size);        
    }

}


/* Font Size */

@mixin font-size($size) {
    font-size : $size;
}

@mixin font-size-lg($key){
    @if(map-has-key($font-lg, $key)){
        font-size: map-get($font-lg, $key);
    }@else{
        @warn "Font Size #{$key} doesn't in the list.";        
    }

}

@mixin font-size-md($key){
    @if(map-has-key($font-md, $key)){
        font-size: map-get($font-md, $key);
    }@else{
        @warn "Font Size #{$key} doesn't in the list.";        
    }

}

@mixin fontFamily($family){
    @if(map-has-key($font-family, $family)){
        font-family: map-get($font-family, $family);
    }@else{
        @warn "Font Family #{$family} doesn't in the list.";        
    }
}



@mixin fullbox{
    width : 100%;
    height: 100%;
}

@mixin absolute($zIndex: 1){
    position: absolute;
    z-index: $zIndex;
}
@mixin relative{
    position: relative;    
}
@mixin fixed{
    position: fixed;
}

@mixin position($pos, $zIndex: 1){
    position : map-get($div-positions, $pos);
    z-index: $zIndex;
}

@mixin autoHeight{
    width:100%;
    height: auto;
}

/* Border */

@mixin border-all($width, $color, $style : solid){
    border: $width $style $color;
}

@mixin border-left($width, $color, $style : solid){
    border-left: $width $style $color;
}

@mixin border-right($width, $color, $style : solid){
    border-right: $width $style $color;
}
@mixin border-top($width, $color, $style : solid){
    border-top: $width $style $color;
}
@mixin border-bottom($width, $color, $style : solid){
    border-bottom: $width $style $color;
}

@mixin border-vertical($width, $color, $style : solid){
    border-top: $width $style $color;
    border-bottom: $width $style $color;
}

@mixin border-horizontal($width, $color, $style : solid){
    border-left: $width $style $color;
    border-right: $width $style $color;
}