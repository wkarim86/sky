@import '../global/functions';

/* Margins */
@mixin margin($x, $y) {
    margin: pixel2Rem($y) pixel2Rem($x);
    /*
    @include respond-to(xs) {
        @if($x > 10 or $y > 10) {
            margin: pixel2Rem($y * 0.5) pixel2Rem($x * 0.5);
        }
        @else {
            margin: pixel2Rem($y) pixel2Rem($x);
        }
    }
    @include respond-to(sm) {
        @if($x > 10 or $y > 10) {
            margin: pixel2Rem($y * 0.6) pixel2Rem($x * 0.6);
        }
        @else {
            margin: pixel2Rem($y) pixel2Rem($x);
        }
    }
    @include respond-to(md) {
        @if($x > 10 or $y > 10) {
            margin: pixel2Rem($y * 0.8) pixel2Rem($x * 0.8);
        }
        @else {
            margin: pixel2Rem($y) pixel2Rem($x);
        }
    }
    @include respond-to(lg) {
        margin: pixel2Rem($y) pixel2Rem($x);
    }
    */
}

@mixin margin-around($p) {
    margin: $p;
    /*
    @include respond-to(xs) {
        @if($p > 10) {
            margin: pixel2Rem($p/2);
        }
        @else {
            margin: pixel2Rem($p);
        }
    }
    @include respond-to(md) {
        margin: $p;
    }
    */
}

@mixin margin-horizontal($p) {
    margin-left: pixel2Rem($p);
    margin-right: pixel2Rem($p);
    /*
    @include respond-to(xs) {
        @if($p > 10) {
            margin-left: pixel2Rem($p/2);
            margin-right: pixel2Rem($p/2);
        }
        @else {
            margin-left: pixel2Rem($p);
            margin-right: pixel2Rem($p);
        }
    }
    @include respond-to(md) {
        margin-left: pixel2Rem($p);
        margin-right: pixel2Rem($p);
    }
    */
}

@mixin margin-vertical($p) {
    margin-top: pixel2Rem($p);
    margin-bottom: pixel2Rem($p);
    /*
    @include respond-to(xs) {
        @if($p > 10) {
            margin-top: pixel2Rem($p/2);
            margin-bottom: pixel2Rem($p/2);
        }
        @else {
            margin-top: pixel2Rem($p);
            margin-bottom: pixel2Rem($p);
        }
    }
    @include respond-to(md) {
        margin-top: pixel2Rem($p);
        margin-bottom: pixel2Rem($p);
    }
    */
}

@mixin margin-l($p) {
    margin-left: pixel2Rem($p);
    
    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         margin-left: pixel2Rem($p/2);
    //     }
    //     @else {
    //         margin-left: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     margin-left: pixel2Rem($p);
    // }
}


/* Padding Mixins */

@mixin padding($x, $y) {
    padding: pixel2Rem($y) pixel2Rem($x);

    // @include respond-to(xs) {
    //     @if($x > 10 or $y > 10) {
    //         padding: pixel2Rem($y * 0.5) pixel2Rem($x * 0.5);
    //     }
    //     @else {
    //         padding: pixel2Rem($y) pixel2Rem($x);
    //     }
    // }
    // @include respond-to(sm) {
    //     @if($x > 10 or $y > 10) {
    //         padding: pixel2Rem($y * 0.6) pixel2Rem($x * 0.6);
    //     }
    //     @else {
    //         padding: pixel2Rem($y) pixel2Rem($x);
    //     }
    // }
    // @include respond-to(md) {
    //     @if($x > 10 or $y > 10) {
    //         padding: pixel2Rem($y * 0.8) pixel2Rem($x * 0.8);
    //     }
    //     @else {
    //         padding: pixel2Rem($y) pixel2Rem($x);
    //     }
    // }
    // @include respond-to(lg) {
    //     padding: pixel2Rem($y) pixel2Rem($x);
    // }
}

@mixin padding-around($p) {
    padding: $p;

    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         padding: pixel2Rem($p/2);
    //     }
    //     @else {
    //         padding: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     padding: $p;
    // }
}

@mixin padding-horizontal($p) {
    padding-left: pixel2Rem($p);
    padding-right: pixel2Rem($p);

    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         padding-left: pixel2Rem($p/2);
    //         padding-right: pixel2Rem($p/2);
    //     }
    //     @else {
    //         padding-left: pixel2Rem($p);
    //         padding-right: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     padding-left: pixel2Rem($p);
    //     padding-right: pixel2Rem($p);
    // }
}

@mixin padding-vertical($p) {
    padding-top: pixel2Rem($p);
    padding-bottom: pixel2Rem($p);

    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         padding-top: pixel2Rem($p/2);
    //         padding-bottom: pixel2Rem($p/2);
    //     }
    //     @else {
    //         padding-top: pixel2Rem($p);
    //         padding-bottom: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     padding-top: pixel2Rem($p);
    //     padding-bottom: pixel2Rem($p);
    // }
}

@mixin padding-l($p) {
    padding-left: pixel2Rem($p);

    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         padding-left: pixel2Rem($p/2);
    //     }
    //     @else {
    //         padding-left: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     padding-left: pixel2Rem($p);
    // }
}

@mixin padding-r($p) {
    padding-right: pixel2Rem($p);
    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         padding-right: pixel2Rem($p * 0.5);
    //     }
    //     @else {
    //         padding-right: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(sm) {
    //     padding-right: pixel2Rem($p * 0.6);
    // }
    // @include respond-to(md) {
    //     padding-right: pixel2Rem($p * 0.8);
    // }
    // @include respond-to(lg) {
    //     padding-right: pixel2Rem($p);
    // }
}

@mixin padding-t($p) {
    padding-top: pixel2Rem($p);
    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         padding-top: pixel2Rem($p/2);
    //     }
    //     @else {
    //         padding-top: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     padding-top: pixel2Rem($p);
    // }
}

@mixin padding-b($p) {
    padding-bottom: pixel2Rem($p);
    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         padding-bottom: pixel2Rem($p/2);
    //     }
    //     @else {
    //         padding-bottom: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     padding-bottom: pixel2Rem($p);
    // }
}


/* Margin Mixin */

@mixin margin-r($p) {
    margin-right: pixel2Rem($p);
    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         margin-right: pixel2Rem($p/2);
    //     }
    //     @else {
    //         margin-right: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     margin-right: pixel2Rem($p);
    // }
}

@mixin margin-t($p) {
    margin-top: pixel2Rem($p);
    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         margin-top: pixel2Rem($p/2);
    //     }
    //     @else {
    //         margin-top: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     margin-top: pixel2Rem($p);
    // }
}

@mixin margin-b($p) {
    margin-bottom: pixel2Rem($p);
    // @include respond-to(xs) {
    //     @if($p > 10) {
    //         margin-bottom: pixel2Rem($p/2);
    //     }
    //     @else {
    //         margin-bottom: pixel2Rem($p);
    //     }
    // }
    // @include respond-to(md) {
    //     margin-bottom: pixel2Rem($p);
    // }
}


/* Transition */

@mixin transition {
    transition: all .5s ease-in-out;
    -webkit-transition: all .5s ease-in-out;
    -moz-transition: all .5s ease-in-out;
}

/* Borders */

@mixin border($width, $color){
    border: #{$width}px solid $color;
}
@mixin border-horizontal($width, $color){
    border-right: #{$width}px solid $color;
    border-left: #{$width}px solid $color;
}
@mixin border-vertical($width, $color){
    border-top: #{$width}px solid $color;
    border-bottom: #{$width}px solid $color;
}
@mixin border-left($width, $color){    
    border-left: #{$width}px solid $color;
}
@mixin border-right($width, $color){
    border-right: #{$width}px solid $color;  
}

@mixin border-bottom($width, $color){    
    border-bottom: #{$width}px solid $color;
}
@mixin border-top($width, $color){
    border-top: #{$width}px solid $color;    
}